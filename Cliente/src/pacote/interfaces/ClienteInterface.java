/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pacote.interfaces;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.net.Socket;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.scene.control.ScrollBar;
import javax.swing.JOptionPane;
import javax.swing.JScrollBar;
import pacote.acesso.ChatMensagem;
import pacote.acesso.ChatMensagem.Action;
import pacote.servico.ClienteServico;

/**
 *
 * @author Cadu
 */
public class ClienteInterface extends javax.swing.JFrame {

    /**
     * Creates new form ClienteInterface
     */
    private Socket socket;
    private ChatMensagem mensagem;
    private ClienteServico servico;
    String nomeUsuario = null;
    public ClienteInterface() {
        initComponents();
    }

    private class ListenerSocket implements Runnable {

        private ObjectInputStream input;

        public ListenerSocket(Socket socket) {
            try {
                this.input = new ObjectInputStream(socket.getInputStream());
            } catch (IOException ex) {
                Logger.getLogger(ClienteInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        @Override
        public void run() {
            ChatMensagem mensagem = null;
            try {

                while ((mensagem = (ChatMensagem) input.readObject()) != null) {
                    Action action = mensagem.getAction();

                    if (action.equals(Action.CONNECT)) {
                        connected(mensagem);
                    } else if (action.equals(Action.DISCONNECT)) {
                        disconnect(mensagem);
                        socket.close();
                    } else if (action.equals(Action.SEND_ALL)) {
                        receive(mensagem);
                    } else if (action.equals(Action.USERS_ONLINE)) {
                        refreshOnlines(mensagem);
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(ClienteInterface.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(ClienteInterface.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }

    private void connected(ChatMensagem mensagem) {
        if (mensagem.getMensagem().equals("ERRO")) {
            this.txtNome.setText("");
            JOptionPane.showMessageDialog(null, "Conexão não realizada");
            return;
        }System.out.println("AQUI");
        this.mensagem = mensagem;
        this.Conectar.setEnabled(false);
        this.txtNome.setEditable(false);

        this.Sair.setEnabled(true);
        this.txtAreaEnviar.setEnabled(true);
        this.txtAreaReceber.setEnabled(true);
        this.Enviar.setEnabled(true);
        this.Limpar.setEnabled(true);
        this.Atualizar.setEnabled(true);
        this.refreshOnlines(mensagem);
        this.nomeUsuario = mensagem.getNome();
        JOptionPane.showMessageDialog(this, "Você está conectado no chat!");
    }

    private void disconnect(ChatMensagem mensagem) {

        this.Conectar.setEnabled(true);
        this.txtNome.setEditable(true);

        this.Sair.setEnabled(false);
        this.txtAreaEnviar.setEnabled(false);
        this.txtAreaReceber.setEnabled(false);
        this.txtAreaReceber.setText("");
        this.Enviar.setEnabled(false);
        this.Limpar.setEnabled(false);
        this.Atualizar.setEnabled(false);
        this.listaOnlines.setListData(new String[0]);

        JOptionPane.showMessageDialog(this, "Você saiu do chat!");

    }

    private void receive(ChatMensagem mensagem) {
        if(mensagem.getNome().equals(this.nomeUsuario)){
            this.txtAreaReceber.append("Você:" + mensagem.getMensagem() + "\n");
        } else {
            this.txtAreaReceber.append(mensagem.getNome() + ": " + mensagem.getMensagem() + "\n");
        }
    }
    

    
    private void refreshOnlines(ChatMensagem mensagem) {
        Set<String> onlines = mensagem.getSetOnlines();

        String[] listData = new String[onlines.size()];
        int i = 0;
        for (String kv : onlines) {
            listData[i++] = kv;
        }

        this.listaOnlines.setListData(listData);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtNome = new javax.swing.JTextField();
        Conectar = new javax.swing.JButton();
        Sair = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        Atualizar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        listaOnlines = new javax.swing.JList<>();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaReceber = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAreaEnviar = new javax.swing.JTextArea();
        Enviar = new javax.swing.JButton();
        Limpar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Bate Papo");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Conectar", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Black", 3, 12), new java.awt.Color(51, 51, 255))); // NOI18N

        txtNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomeActionPerformed(evt);
            }
        });

        Conectar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pacote/interfaces/imagens/user_add.png"))); // NOI18N
        Conectar.setText("Conectar");
        Conectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConectarActionPerformed(evt);
            }
        });

        Sair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pacote/interfaces/imagens/user_delete.png"))); // NOI18N
        Sair.setText("Sair");
        Sair.setEnabled(false);
        Sair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SairActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtNome)
                .addGap(18, 18, 18)
                .addComponent(Conectar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Sair)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Conectar)
                    .addComponent(Sair))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Onlines", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial Black", 3, 12), new java.awt.Color(51, 51, 255))); // NOI18N

        Atualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pacote/interfaces/imagens/zoom.png"))); // NOI18N
        Atualizar.setText("Atualizar");
        Atualizar.setEnabled(false);
        Atualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AtualizarActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(listaOnlines);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(Atualizar))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Atualizar))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jScrollPane1.setAutoscrolls(true);
        jScrollPane1.setVerticalScrollBar(jScrollPane1.getVerticalScrollBar());

        txtAreaReceber.setEditable(false);
        txtAreaReceber.setColumns(20);
        txtAreaReceber.setLineWrap(true);
        txtAreaReceber.setRows(5);
        txtAreaReceber.setAutoscrolls(false);
        txtAreaReceber.setEnabled(false);
        jScrollPane1.setViewportView(txtAreaReceber);

        txtAreaEnviar.setColumns(20);
        txtAreaEnviar.setLineWrap(true);
        txtAreaEnviar.setRows(5);
        txtAreaEnviar.setEnabled(false);
        jScrollPane2.setViewportView(txtAreaEnviar);

        Enviar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pacote/interfaces/imagens/accept.png"))); // NOI18N
        Enviar.setText("Enviar");
        Enviar.setEnabled(false);
        Enviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EnviarActionPerformed(evt);
            }
        });

        Limpar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pacote/interfaces/imagens/newspaper.png"))); // NOI18N
        Limpar.setText("Limpar");
        Limpar.setEnabled(false);
        Limpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LimparActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(0, 113, Short.MAX_VALUE)
                        .addComponent(Limpar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Enviar))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Enviar)
                    .addComponent(Limpar)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomeActionPerformed

    private void ConectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConectarActionPerformed
        // TODO add your handling code here:
        String nome = this.txtNome.getText();
        if (!nome.isEmpty()) {
            this.mensagem = new ChatMensagem();
            this.mensagem.setAction(Action.CONNECT);
            this.mensagem.setNome(nome);

            this.servico = new ClienteServico();
            this.socket = this.servico.connect();

            new Thread(new ListenerSocket(this.socket)).start();

            this.servico.send(mensagem);
        }

    }//GEN-LAST:event_ConectarActionPerformed

    private void AtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AtualizarActionPerformed
        // TODO add your handling code here:

        String nome = mensagem.getNome();

        mensagem = new ChatMensagem();

        mensagem.setNome(nome);
        mensagem.setAction(Action.USERS_ONLINE);
        this.servico.send(mensagem);
    }//GEN-LAST:event_AtualizarActionPerformed

    private void SairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SairActionPerformed
        // TODO add your handling code here:
        String nome = this.mensagem.getNome();

        this.mensagem = new ChatMensagem();

        this.mensagem.setNome(nome);
        this.mensagem.setAction(Action.DISCONNECT);
        this.servico.send(this.mensagem);
        disconnect(mensagem);

    }//GEN-LAST:event_SairActionPerformed

    private void EnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EnviarActionPerformed
        // TODO add your handling code here:
        String texto = this.txtAreaEnviar.getText();
        if (!texto.isEmpty()) {
            String nome = this.mensagem.getNome();

            this.mensagem = new ChatMensagem();

            this.mensagem.setNome(nome);
            this.mensagem.setMensagem(texto);
            this.mensagem.setAction(Action.SEND_ALL);

            this.servico.send(this.mensagem);
        }

        this.txtAreaEnviar.setText("");
    }//GEN-LAST:event_EnviarActionPerformed

    private void LimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LimparActionPerformed
        // TODO add your handling code here:
        this.txtAreaReceber.setText("");
    }//GEN-LAST:event_LimparActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Atualizar;
    private javax.swing.JButton Conectar;
    private javax.swing.JButton Enviar;
    private javax.swing.JButton Limpar;
    private javax.swing.JButton Sair;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<String> listaOnlines;
    private javax.swing.JTextArea txtAreaEnviar;
    private javax.swing.JTextArea txtAreaReceber;
    private javax.swing.JTextField txtNome;
    // End of variables declaration//GEN-END:variables
}
